epsilon_W = my_data$epsilon_W[1:T],
r_k_star = my_data$r_k_star[1:T],
inflationtaget=my_data$inflationtarget[1:T],
potential_gdp=my_data$potential_gdp[1:T],
pi_bar = my_data$pi_bar[1:T],
kapital = my_data$K_hat[1:T],
q= my_data$Q_hat[1:T],
potential_gdp=my_data$potential_gdp[1:T],
epsilon_pitwo = my_data$epsilon_pitwo[1:T],
epsilon_L = my_data$epsilon_L[1:T],
consumption_growth_vector = my_data$C_hat[1:T],
investment_growth_vector = my_data$I_hat[1:T],
output_growth_vector= my_data$Y_hat[1:T],
inflation_vector = my_data$Pi_hat[1:T],
ffr_vector= my_data$R_hat[1:T],
hours_vector= my_data$L_hat[1:T],
wage_growth_vector= my_data$w_hat[1:T],
shock_time = 20,  # Example time point
shock_value = -0.3  # Example shock value
)
# Re-check the lengths to see if they meet the expected length
lengths <- sapply(my_data, length)
print(lengths)
# If lengths are correct, proceed to create the Stan data list
T <- num_rows
# Combine vectors into a new list for Stan
data_list <- list(
T = T,  # 'T' is a single integer, not a vector
epsilon_C = my_data$epsilon_C[1:T],
epsilon_Q = my_data$epsilon_Q[1:T],
epsilon_I = my_data$epsilon_I[1:T],
epsilon_PI = my_data$epsilon_Pi[1:T],
epsilon_G = my_data$epsilon_G[1:T],
epsilon_R = my_data$epsilon_R[1:T],
epsilon_W = my_data$epsilon_W[1:T],
r_k_star = my_data$r_k_star[1:T],
inflationtaget=my_data$inflationtarget[1:T],
potential_gdp=my_data$potential_gdp[1:T],
pi_bar = my_data$pi_bar[1:T],
kapital = my_data$K_hat[1:T],
q= my_data$Q_hat[1:T],
potential_gdp=my_data$potential_gdp[1:T],
epsilon_pitwo = my_data$epsilon_pitwo[1:T],
epsilon_L = my_data$epsilon_L[1:T],
consumption_growth_vector = my_data$C_hat[1:T],
investment_growth_vector = my_data$I_hat[1:T],
output_growth_vector= my_data$Y_hat[1:T],
inflation_vector = my_data$Pi_hat[1:T],
ffr_vector= my_data$R_hat[1:T],
hours_vector= my_data$L_hat[1:T],
wage_growth_vector= my_data$w_hat[1:T],
shock_time = 20,  # Example time point
shock_value = -0.3  # Example shock value
)
# Re-check the lengths to see if they meet the expected length
lengths <- sapply(my_data, length)
print(lengths)
# If lengths are correct, proceed to create the Stan data list
T <- num_rows
# Combine vectors into a new list for Stan
data_list <- list(
T = T,  # 'T' is a single integer, not a vector
epsilon_C = my_data$epsilon_C[1:T],
epsilon_Q = my_data$epsilon_Q[1:T],
epsilon_I = my_data$epsilon_I[1:T],
epsilon_PI = my_data$epsilon_Pi[1:T],
epsilon_G = my_data$epsilon_G[1:T],
epsilon_R = my_data$epsilon_R[1:T],
epsilon_W = my_data$epsilon_W[1:T],
r_k_star = my_data$r_k_star[1:T],
inflationtaget=my_data$inflationtarget[1:T],
potential_gdp=my_data$potential_gdp[1:T],
pi_bar = my_data$pi_bar[1:T],
kapital = my_data$K_hat[1:T],
q= my_data$Q_hat[1:T],
potential_gdp=my_data$potential_gdp[1:T],
epsilon_pitwo = my_data$epsilon_pitwo[1:T],
epsilon_L = my_data$epsilon_L[1:T],
consumption_growth_vector = my_data$C_hat[1:T],
investment_growth_vector = my_data$I_hat[1:T],
output_growth_vector= my_data$Y_hat[1:T],
inflation_vector = my_data$Pi_hat[1:T],
ffr_vector= my_data$R_hat[1:T],
hours_vector= my_data$L_hat[1:T],
wage_growth_vector= my_data$w_hat[1:T],
shock_time = 20,  # Example time point
shock_value = -0.3  # Example shock value
)
# Re-check the lengths to see if they meet the expected length
lengths <- sapply(my_data, length)
print(lengths)
# If lengths are correct, proceed to create the Stan data list
T <- num_rows
# Combine vectors into a new list for Stan
data_list <- list(
T = T,  # 'T' is a single integer, not a vector
epsilon_C = my_data$epsilon_C[1:T],
epsilon_Q = my_data$epsilon_Q[1:T],
epsilon_I = my_data$epsilon_I[1:T],
epsilon_PI = my_data$epsilon_Pi[1:T],
epsilon_G = my_data$epsilon_G[1:T],
epsilon_R = my_data$epsilon_R[1:T],
epsilon_W = my_data$epsilon_W[1:T],
r_k_star = my_data$r_k_star[1:T],
inflationtaget=my_data$inflationtarget[1:T],
potential_gdp=my_data$potential_gdp[1:T],
pi_bar = my_data$pi_bar[1:T],
kapital = my_data$K_hat[1:T],
q= my_data$Q_hat[1:T],
potential_gdp=my_data$potential_gdp[1:T],
epsilon_pitwo = my_data$epsilon_pitwo[1:T],
epsilon_L = my_data$epsilon_L[1:T],
consumption_growth_vector = my_data$C_hat[1:T],
investment_growth_vector = my_data$I_hat[1:T],
output_growth_vector= my_data$Y_hat[1:T],
inflation_vector = my_data$Pi_hat[1:T],
ffr_vector= my_data$R_hat[1:T],
hours_vector= my_data$L_hat[1:T],
wage_growth_vector= my_data$w_hat[1:T],
shock_time = 20,  # Example time point
shock_value = -0.3  # Example shock value
)
# Re-check the lengths to see if they meet the expected length
lengths <- sapply(my_data, length)
print(lengths)
# If lengths are correct, proceed to create the Stan data list
T <- num_rows
# Combine vectors into a new list for Stan
data_list <- list(
T = T,  # 'T' is a single integer, not a vector
epsilon_C = my_data$epsilon_C[1:T],
epsilon_Q = my_data$epsilon_Q[1:T],
epsilon_I = my_data$epsilon_I[1:T],
epsilon_PI = my_data$epsilon_Pi[1:T],
epsilon_G = my_data$epsilon_G[1:T],
epsilon_R = my_data$epsilon_R[1:T],
epsilon_W = my_data$epsilon_W[1:T],
r_k_star = my_data$r_k_star[1:T],
inflationtarget=my_data$inflationtarget[1:T],
potential_gdp=my_data$potential_gdp[1:T],
pi_bar = my_data$pi_bar[1:T],
kapital = my_data$K_hat[1:T],
q= my_data$Q_hat[1:T],
potential_gdp=my_data$potential_gdp[1:T],
epsilon_pitwo = my_data$epsilon_pitwo[1:T],
epsilon_L = my_data$epsilon_L[1:T],
consumption_growth_vector = my_data$C_hat[1:T],
investment_growth_vector = my_data$I_hat[1:T],
output_growth_vector= my_data$Y_hat[1:T],
inflation_vector = my_data$Pi_hat[1:T],
ffr_vector= my_data$R_hat[1:T],
hours_vector= my_data$L_hat[1:T],
wage_growth_vector= my_data$w_hat[1:T],
shock_time = 20,  # Example time point
shock_value = -0.3  # Example shock value
)
# Re-check the lengths to see if they meet the expected length
lengths <- sapply(my_data, length)
print(lengths)
# If lengths are correct, proceed to create the Stan data list
T <- num_rows
# Combine vectors into a new list for Stan
data_list <- list(
T = T,  # 'T' is a single integer, not a vector
epsilon_C = my_data$epsilon_C[1:T],
epsilon_Q = my_data$epsilon_Q[1:T],
epsilon_I = my_data$epsilon_I[1:T],
epsilon_PI = my_data$epsilon_Pi[1:T],
epsilon_G = my_data$epsilon_G[1:T],
epsilon_R = my_data$epsilon_R[1:T],
epsilon_W = my_data$epsilon_W[1:T],
r_k_star = my_data$r_k_star[1:T],
inflationtarget=my_data$inflationtarget[1:T],
potential_gdp=my_data$potential_gdp[1:T],
pi_bar = my_data$pi_bar[1:T],
kapital = my_data$K_hat[1:T],
q= my_data$Q_hat[1:T],
potential_gdp=my_data$potential_gdp[1:T],
epsilon_pitwo = my_data$epsilon_pitwo[1:T],
epsilon_L = my_data$epsilon_L[1:T],
consumption_growth_vector = my_data$C_hat[1:T],
investment_growth_vector = my_data$I_hat[1:T],
output_growth_vector= my_data$Y_hat[1:T],
inflation_vector = my_data$Pi_hat[1:T],
ffr_vector= my_data$R_hat[1:T],
hours_vector= my_data$L_hat[1:T],
wage_growth_vector= my_data$w_hat[1:T],
shock_time = 20,  # Example time point
shock_value = -0.3  # Example shock value
)
# Re-check the lengths to see if they meet the expected length
lengths <- sapply(my_data, length)
print(lengths)
# If lengths are correct, proceed to create the Stan data list
T <- num_rows
# Combine vectors into a new list for Stan
data_list <- list(
T = T,  # 'T' is a single integer, not a vector
epsilon_C = my_data$epsilon_C[1:T],
epsilon_Q = my_data$epsilon_Q[1:T],
epsilon_I = my_data$epsilon_I[1:T],
epsilon_PI = my_data$epsilon_Pi[1:T],
epsilon_G = my_data$epsilon_G[1:T],
epsilon_R = my_data$epsilon_R[1:T],
epsilon_W = my_data$epsilon_W[1:T],
r_k_star = my_data$r_k_star[1:T],
inflationtarget=my_data$inflationtarget[1:T],
potential_gdp=my_data$potential_gdp[1:T],
pi_bar = my_data$pi_bar[1:T],
kapital = my_data$K_hat[1:T],
q= my_data$Q_hat[1:T],
potential_gdp=my_data$potential_gdp[1:T],
epsilon_pitwo = my_data$epsilon_pitwo[1:T],
epsilon_L = my_data$epsilon_L[1:T],
consumption_growth_vector = my_data$C_hat[1:T],
investment_growth_vector = my_data$I_hat[1:T],
output_growth_vector= my_data$Y_hat[1:T],
inflation_vector = my_data$Pi_hat[1:T],
ffr_vector= my_data$R_hat[1:T],
hours_vector= my_data$L_hat[1:T],
wage_growth_vector= my_data$w_hat[1:T],
shock_time = 20,  # Example time point
shock_value = -0.3  # Example shock value
)
# Re-check the lengths to see if they meet the expected length
lengths <- sapply(my_data, length)
print(lengths)
# If lengths are correct, proceed to create the Stan data list
T <- num_rows
# Combine vectors into a new list for Stan
data_list <- list(
T = T,  # 'T' is a single integer, not a vector
epsilon_C = my_data$epsilon_C[1:T],
epsilon_Q = my_data$epsilon_Q[1:T],
epsilon_I = my_data$epsilon_I[1:T],
epsilon_PI = my_data$epsilon_Pi[1:T],
epsilon_G = my_data$epsilon_G[1:T],
epsilon_R = my_data$epsilon_R[1:T],
epsilon_W = my_data$epsilon_W[1:T],
r_k_star = my_data$r_k_star[1:T],
inflationtarget=my_data$inflationtarget[1:T],
potential_gdp=my_data$potential_gdp[1:T],
pi_bar = my_data$pi_bar[1:T],
kapital = my_data$K_hat[1:T],
q= my_data$Q_hat[1:T],
potential_gdp=my_data$potential_gdp[1:T],
epsilon_pitwo = my_data$epsilon_pitwo[1:T],
epsilon_L = my_data$epsilon_L[1:T],
consumption_growth_vector = my_data$C_hat[1:T],
investment_growth_vector = my_data$I_hat[1:T],
output_growth_vector= my_data$Y_hat[1:T],
inflation_vector = my_data$Pi_hat[1:T],
ffr_vector= my_data$R_hat[1:T],
hours_vector= my_data$L_hat[1:T],
wage_growth_vector= my_data$w_hat[1:T],
shock_time = 20,  # Example time point
shock_value = -0.3  # Example shock value
)
fit <- sampling(model, data =data_list , chains = 4, iter = 6000, warmup = 1000)
fit <- vb(model, data = data_list)
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Check if the variables exist and have correct dimensions
print(names(samples))
print(dim(samples$output_growth_shocked))
print(dim(samples$consumption_growth_shocked))
print(dim(samples$investment_growth_shocked))
print(dim(samples$wage_growth_shocked))
print(dim(samples$hours_shocked))
print(dim(samples$inflation_shocked))
print(dim(samples$ffr_shocked))
# Calculate the mean and credible intervals for each shocked variable
# Output Growth
mean_output_growth_shocked <- apply(samples$output_growth_shocked_output, 2, mean)
lower_credible_interval_output <- apply(samples$output_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_output <- apply(samples$output_growth_shocked_output, 2, quantile, probs = 0.975)
# Consumption Growth
mean_consumption_growth_shocked <- apply(samples$consumption_growth_shocked_output, 2, mean)
lower_credible_interval_consumption <- apply(samples$consumption_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_consumption <- apply(samples$consumption_growth_shocked_output, 2, quantile, probs = 0.975)
# Investment Growth
mean_investment_growth_shocked <- apply(samples$investment_growth_shocked_output, 2, mean)
lower_credible_interval_investment <- apply(samples$investment_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_investment <- apply(samples$investment_growth_shocked_output, 2, quantile, probs = 0.975)
# Wage Growth
mean_wage_growth_shocked <- apply(samples$wage_growth_shocked_output, 2, mean)
lower_credible_interval_wage <- apply(samples$wage_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_wage <- apply(samples$wage_growth_shocked_output, 2, quantile, probs = 0.975)
# potential_gdp
potential_gdp<- apply(samples$potential_gdp_shocked, 2, mean)
lower_credible_interval_hours <- apply(samples$potential_gdp_shocked, 2, quantile, probs = 0.025)
upper_credible_interval_hours <- apply(samples$potential_gdp_shocked, 2, quantile, probs = 0.975)
# Hours
mean_hours_shocked <- apply(samples$hours_shocked_output, 2, mean)
lower_credible_interval_hours <- apply(samples$hours_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_hours <- apply(samples$hours_shocked_output, 2, quantile, probs = 0.975)
# Inflation
mean_inflation_shocked <- apply(samples$inflation_shocked_output, 2, mean)
lower_credible_interval_inflation <- apply(samples$inflation_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_inflation <- apply(samples$inflation_shocked_output, 2, quantile, probs = 0.975)
# Federal Funds Rate
mean_ffr_shocked <- apply(samples$ffr_shocked_output, 2, mean)
lower_credible_interval_ffr <- apply(samples$ffr_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_ffr <- apply(samples$ffr_shocked_output, 2, quantile, probs = 0.975)
library(ggplot2)
library(gridExtra)
# Create a function to plot a variable with its credible intervals
plot_shocked_variable <- function(original, mean_shocked, lower_ci, upper_ci, variable_name) {
data <- data.frame(
Time = 1:length(original),
Original = original,
Mean_Shocked = mean_shocked,
Lower_CI = lower_ci,
Upper_C_I = upper_ci
)
ggplot(data, aes(x = Time)) +
geom_line(aes(y = Original), color = "blue", linetype = "dashed") +
geom_line(aes(y = Mean_Shocked), color = "red") +
geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_C_I), fill = "red", alpha = 0.2) +
labs(title = paste("Original and Shocked", variable_name, "Series"), x = "Time", y = variable_name) +
theme_minimal() +
theme(
plot.title = element_text(size = 10),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.text = element_text(size = 6),
legend.title = element_text(size = 8),
legend.text = element_text(size = 6)
)
}
# Plot each variable
plot_list <- list(
plot_shocked_variable(data_list$output_growth_vector, mean_output_growth_shocked, lower_credible_interval_output, upper_credible_interval_output, "Output Growth"),
plot_shocked_variable(data_list$consumption_growth_vector, mean_consumption_growth_shocked, lower_credible_interval_consumption, upper_credible_interval_consumption, "Consumption Growth"),
plot_shocked_variable(data_list$investment_growth_vector, mean_investment_growth_shocked, lower_credible_interval_investment, upper_credible_interval_investment, "Investment Growth"),
plot_shocked_variable(data_list$wage_growth_vector, mean_wage_growth_shocked, lower_credible_interval_wage, upper_credible_interval_wage, "Wage Growth"),
plot_shocked_variable(data_list$hours_vector, mean_hours_shocked, lower_credible_interval_hours, upper_credible_interval_hours, "Hours"),
plot_shocked_variable(data_list$inflation_vector, mean_inflation_shocked, lower_credible_interval_inflation, upper_credible_interval_inflation, "Inflation"),
plot_shocked_variable(data_list$ffr_vector, mean_ffr_shocked, lower_credible_interval_ffr, upper_credible_interval_ffr, "Federal Funds Rate")
)
# Arrange the plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
fit <- sampling(model, data =data_list , chains = 4, iter = 6000, warmup = 1000)
fit <- sampling(model, data = data_list, algorithm = "NUTS", iter = 2000, chains = 4)
fit <- sampling(model, data = data_list, algorithm = "Fixed_param", iter = 1, chains = 1)
fit <- sampling(model, data = data_list, algorithm = "Fixed_param", iter = 1, chains = 1)
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Check if the variables exist and have correct dimensions
print(names(samples))
print(dim(samples$output_growth_shocked))
print(dim(samples$consumption_growth_shocked))
print(dim(samples$investment_growth_shocked))
print(dim(samples$wage_growth_shocked))
print(dim(samples$hours_shocked))
print(dim(samples$inflation_shocked))
print(dim(samples$ffr_shocked))
# Calculate the mean and credible intervals for each shocked variable
# Output Growth
mean_output_growth_shocked <- apply(samples$output_growth_shocked_output, 2, mean)
lower_credible_interval_output <- apply(samples$output_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_output <- apply(samples$output_growth_shocked_output, 2, quantile, probs = 0.975)
# Consumption Growth
mean_consumption_growth_shocked <- apply(samples$consumption_growth_shocked_output, 2, mean)
lower_credible_interval_consumption <- apply(samples$consumption_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_consumption <- apply(samples$consumption_growth_shocked_output, 2, quantile, probs = 0.975)
# Investment Growth
mean_investment_growth_shocked <- apply(samples$investment_growth_shocked_output, 2, mean)
lower_credible_interval_investment <- apply(samples$investment_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_investment <- apply(samples$investment_growth_shocked_output, 2, quantile, probs = 0.975)
# Wage Growth
mean_wage_growth_shocked <- apply(samples$wage_growth_shocked_output, 2, mean)
lower_credible_interval_wage <- apply(samples$wage_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_wage <- apply(samples$wage_growth_shocked_output, 2, quantile, probs = 0.975)
# potential_gdp
potential_gdp<- apply(samples$potential_gdp_shocked, 2, mean)
lower_credible_interval_hours <- apply(samples$potential_gdp_shocked, 2, quantile, probs = 0.025)
upper_credible_interval_hours <- apply(samples$potential_gdp_shocked, 2, quantile, probs = 0.975)
# Hours
mean_hours_shocked <- apply(samples$hours_shocked_output, 2, mean)
lower_credible_interval_hours <- apply(samples$hours_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_hours <- apply(samples$hours_shocked_output, 2, quantile, probs = 0.975)
# Inflation
mean_inflation_shocked <- apply(samples$inflation_shocked_output, 2, mean)
lower_credible_interval_inflation <- apply(samples$inflation_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_inflation <- apply(samples$inflation_shocked_output, 2, quantile, probs = 0.975)
# Federal Funds Rate
mean_ffr_shocked <- apply(samples$ffr_shocked_output, 2, mean)
lower_credible_interval_ffr <- apply(samples$ffr_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_ffr <- apply(samples$ffr_shocked_output, 2, quantile, probs = 0.975)
library(ggplot2)
library(gridExtra)
# Create a function to plot a variable with its credible intervals
plot_shocked_variable <- function(original, mean_shocked, lower_ci, upper_ci, variable_name) {
data <- data.frame(
Time = 1:length(original),
Original = original,
Mean_Shocked = mean_shocked,
Lower_CI = lower_ci,
Upper_C_I = upper_ci
)
ggplot(data, aes(x = Time)) +
geom_line(aes(y = Original), color = "blue", linetype = "dashed") +
geom_line(aes(y = Mean_Shocked), color = "red") +
geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_C_I), fill = "red", alpha = 0.2) +
labs(title = paste("Original and Shocked", variable_name, "Series"), x = "Time", y = variable_name) +
theme_minimal() +
theme(
plot.title = element_text(size = 10),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.text = element_text(size = 6),
legend.title = element_text(size = 8),
legend.text = element_text(size = 6)
)
}
# Plot each variable
plot_list <- list(
plot_shocked_variable(data_list$output_growth_vector, mean_output_growth_shocked, lower_credible_interval_output, upper_credible_interval_output, "Output Growth"),
plot_shocked_variable(data_list$consumption_growth_vector, mean_consumption_growth_shocked, lower_credible_interval_consumption, upper_credible_interval_consumption, "Consumption Growth"),
plot_shocked_variable(data_list$investment_growth_vector, mean_investment_growth_shocked, lower_credible_interval_investment, upper_credible_interval_investment, "Investment Growth"),
plot_shocked_variable(data_list$wage_growth_vector, mean_wage_growth_shocked, lower_credible_interval_wage, upper_credible_interval_wage, "Wage Growth"),
plot_shocked_variable(data_list$hours_vector, mean_hours_shocked, lower_credible_interval_hours, upper_credible_interval_hours, "Hours"),
plot_shocked_variable(data_list$inflation_vector, mean_inflation_shocked, lower_credible_interval_inflation, upper_credible_interval_inflation, "Inflation"),
plot_shocked_variable(data_list$ffr_vector, mean_ffr_shocked, lower_credible_interval_ffr, upper_credible_interval_ffr, "Federal Funds Rate")
)
# Arrange the plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
fit <- sampling(model, data = data_list, algorithm = "Fixed_param", iter = 4, chains = 1)
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Check if the variables exist and have correct dimensions
print(names(samples))
print(dim(samples$output_growth_shocked))
print(dim(samples$consumption_growth_shocked))
print(dim(samples$investment_growth_shocked))
print(dim(samples$wage_growth_shocked))
print(dim(samples$hours_shocked))
print(dim(samples$inflation_shocked))
print(dim(samples$ffr_shocked))
# Calculate the mean and credible intervals for each shocked variable
# Output Growth
mean_output_growth_shocked <- apply(samples$output_growth_shocked_output, 2, mean)
lower_credible_interval_output <- apply(samples$output_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_output <- apply(samples$output_growth_shocked_output, 2, quantile, probs = 0.975)
# Consumption Growth
mean_consumption_growth_shocked <- apply(samples$consumption_growth_shocked_output, 2, mean)
lower_credible_interval_consumption <- apply(samples$consumption_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_consumption <- apply(samples$consumption_growth_shocked_output, 2, quantile, probs = 0.975)
# Investment Growth
mean_investment_growth_shocked <- apply(samples$investment_growth_shocked_output, 2, mean)
lower_credible_interval_investment <- apply(samples$investment_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_investment <- apply(samples$investment_growth_shocked_output, 2, quantile, probs = 0.975)
# Wage Growth
mean_wage_growth_shocked <- apply(samples$wage_growth_shocked_output, 2, mean)
lower_credible_interval_wage <- apply(samples$wage_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_wage <- apply(samples$wage_growth_shocked_output, 2, quantile, probs = 0.975)
# potential_gdp
potential_gdp<- apply(samples$potential_gdp_shocked, 2, mean)
lower_credible_interval_hours <- apply(samples$potential_gdp_shocked, 2, quantile, probs = 0.025)
upper_credible_interval_hours <- apply(samples$potential_gdp_shocked, 2, quantile, probs = 0.975)
# Hours
mean_hours_shocked <- apply(samples$hours_shocked_output, 2, mean)
lower_credible_interval_hours <- apply(samples$hours_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_hours <- apply(samples$hours_shocked_output, 2, quantile, probs = 0.975)
# Inflation
mean_inflation_shocked <- apply(samples$inflation_shocked_output, 2, mean)
lower_credible_interval_inflation <- apply(samples$inflation_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_inflation <- apply(samples$inflation_shocked_output, 2, quantile, probs = 0.975)
# Federal Funds Rate
mean_ffr_shocked <- apply(samples$ffr_shocked_output, 2, mean)
lower_credible_interval_ffr <- apply(samples$ffr_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_ffr <- apply(samples$ffr_shocked_output, 2, quantile, probs = 0.975)
library(ggplot2)
library(gridExtra)
# Create a function to plot a variable with its credible intervals
plot_shocked_variable <- function(original, mean_shocked, lower_ci, upper_ci, variable_name) {
data <- data.frame(
Time = 1:length(original),
Original = original,
Mean_Shocked = mean_shocked,
Lower_CI = lower_ci,
Upper_C_I = upper_ci
)
ggplot(data, aes(x = Time)) +
geom_line(aes(y = Original), color = "blue", linetype = "dashed") +
geom_line(aes(y = Mean_Shocked), color = "red") +
geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_C_I), fill = "red", alpha = 0.2) +
labs(title = paste("Original and Shocked", variable_name, "Series"), x = "Time", y = variable_name) +
theme_minimal() +
theme(
plot.title = element_text(size = 10),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.text = element_text(size = 6),
legend.title = element_text(size = 8),
legend.text = element_text(size = 6)
)
}
# Plot each variable
plot_list <- list(
plot_shocked_variable(data_list$output_growth_vector, mean_output_growth_shocked, lower_credible_interval_output, upper_credible_interval_output, "Output Growth"),
plot_shocked_variable(data_list$consumption_growth_vector, mean_consumption_growth_shocked, lower_credible_interval_consumption, upper_credible_interval_consumption, "Consumption Growth"),
plot_shocked_variable(data_list$investment_growth_vector, mean_investment_growth_shocked, lower_credible_interval_investment, upper_credible_interval_investment, "Investment Growth"),
plot_shocked_variable(data_list$wage_growth_vector, mean_wage_growth_shocked, lower_credible_interval_wage, upper_credible_interval_wage, "Wage Growth"),
plot_shocked_variable(data_list$hours_vector, mean_hours_shocked, lower_credible_interval_hours, upper_credible_interval_hours, "Hours"),
plot_shocked_variable(data_list$inflation_vector, mean_inflation_shocked, lower_credible_interval_inflation, upper_credible_interval_inflation, "Inflation"),
plot_shocked_variable(data_list$ffr_vector, mean_ffr_shocked, lower_credible_interval_ffr, upper_credible_interval_ffr, "Federal Funds Rate")
)
# Arrange the plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
fit <- sampling(model, data = data_list, algorithm = "NUTS", iter = 2000, chains = 4)
