sigma_L <- mean(samples$sigma_L)
sigma_c <- mean(samples$sigma_c)
h <- mean(samples$h)
phi <- mean(samples$phi)
phi_uppercase <- mean(samples$phi_uppercase)
rbar_k <- mean(samples$rbar_k)
Ky <- mean(samples$Ky)
sigma_eta_C <- mean(samples$sigma_eta_C)
Invy <- mean(samples$Invy)
Cy <- mean(samples$Cy)
gy <- mean(samples$gy)
r_pi <- mean(samples$r_pi)
r_y <- mean(samples$r_y)
r_delta <- mean(samples$r_delta)
rho <- mean(samples$rho)
rho_el <- mean(samples$rho_el)
rho_ea <- mean(samples$rho_ea)
rho_eb <- mean(samples$rho_eb)
rho_G <- mean(samples$rho_G)
rho_pi <- mean(samples$rho_pi)
rh_i <- mean(samples$rh_i)
rho_lamdaw <- mean(samples$rho_lamdaw)
rho_q <- mean(samples$rho_q)
rho_lamda_p <- mean(samples$rho_lamda_p)
rho_L <- mean(samples$rho_L)
simulate_shock_and_update <- function(data, shock_time, shock_value, beta, gamma_pi, gamma_w, h, phi, sigma_L, rho_r, rho_pi, rho_y, r_y, r_pi, r_delta) {
N <- data$T
output_growth_shock <- data$output_growth_vector
consumption_growth_shock <- data$consumption_growth_vector
investment_growth_shock <- data$investment_growth_vector
wage_growth_shock <- data$wage_growth_vector
hours_shock <- data$hours_vector
inflation_shock <- data$inflation_vector
ffr_shock <- data$ffr_vector
# Apply the shock to output growth
output_growth_shock[shock_time] <- output_growth_shock[shock_time] * (1 - shock_value / 100)
# Propagate the shock through the model
for (t in (shock_time + 1):N) {
# Example model equations to update other series based on the shocked output growth
consumption_growth_shock[t] <- h * consumption_growth_shock[t-1] + beta * output_growth_shock[t-1] + rnorm(1, 0, sigma_L)
investment_growth_shock[t] <- phi * investment_growth_shock[t-1] + beta * output_growth_shock[t-1] + rnorm(1, 0, sigma_L)
wage_growth_shock[t] <- gamma_w * wage_growth_shock[t-1] + beta * output_growth_shock[t-1] + rnorm(1, 0, sigma_L)
hours_shock[t] <- gamma_pi * hours_shock[t-1] + beta * output_growth_shock[t-1] + rnorm(1, 0, sigma_L)
inflation_shock[t] <- gamma_pi * inflation_shock[t-1] + rho_pi * output_growth_shock[t-1] + rnorm(1, 0, sigma_L)
ffr_shock[t] <- gamma_pi * ffr_shock[t-1] + rho_r * output_growth_shock[t-1] + rnorm(1, 0, sigma_L)
}
return(list(
output_growth_shock = output_growth_shock,
consumption_growth_shock = consumption_growth_shock,
investment_growth_shock = investment_growth_shock,
wage_growth_shock = wage_growth_shock,
hours_shock = hours_shock,
inflation_shock = inflation_shock,
ffr_shock = ffr_shock
))
}
# Apply a 30% decrease shock at a specific time point (e.g., t = 50)
shock_time <- 50  # This is the time point at which the shock is applied
shock_value <- 30  # 30% decrease
# Simulate the shocked output growth and update other series
shocked_series <- simulate_shock_and_update(data_list, shock_time, shock_value, beta, gamma_pi, gamma_w, h, phi, sigma_L, rho_r, rho_pi, rho_y, r_y, r_pi, r_delta)
fit <- sampling(model, data =data_list , chains = 2, iter = 6000, warmup = 1000)
library(fitdistrplus)
library(dplyr)
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Variables of interest
variables <- c("alpha_C", "alpha_I", "alpha_W", "alpha_H", "alpha_PI", "alpha_Q")
# Organize samples into a list
samples_list <- lapply(variables, function(var) {
as.vector(samples[[var]])
})
names(samples_list) <- variables
# Function to fit normal and beta distributions and return the results
fit_distributions <- function(var, samples) {
result <- try({
# Fit normal distribution
normal_fit <- fitdist(samples, "norm")
normal_params <- normal_fit$estimate
# Check for non-finite values in normal_params
if (any(!is.finite(normal_params))) {
message(paste("Skipping normal distribution fitting for", var, "due to non-finite values"))
return(NULL)
}
# Scale samples to (0, 1) for beta distribution fitting
scaled_samples <- (samples - min(samples)) / (max(samples) - min(samples))
# Ensure no values are exactly 0 or 1
scaled_samples[scaled_samples == 0] <- 0.0001
scaled_samples[scaled_samples == 1] <- 0.9999
# Fit beta distribution
beta_fit <- fitdist(scaled_samples, "beta", start = list(shape1 = 1, shape2 = 7.6))
beta_params <- beta_fit$estimate
# Check for non-finite values in beta_params
if (any(!is.finite(beta_params))) {
message(paste("Skipping beta distribution fitting for", var, "due to non-finite values"))
return(NULL)
}
return(list(normal = normal_params, beta = beta_params))
}, silent = TRUE)
if (inherits(result, "try-error")) {
message(paste("Fitting failed for", var))
return(NULL)
}
return(result)
}
# Initialize an empty data frame to store the results
results_df <- data.frame(
variable = character(),
param1 = numeric(),
param2 = numeric(),
stringsAsFactors = FALSE
)
# Loop through each variable and fit the distributions
for (var in names(samples_list)) {
fit_result <- fit_distributions(var, samples_list[[var]])
if (!is.null(fit_result)) {
if (!is.null(fit_result$normal)) {
results_df <- results_df %>%
bind_rows(data.frame(
variable = var,
param1 = fit_result$normal[1],
param2 = fit_result$normal[2],
stringsAsFactors = FALSE
))
}
if (!is.null(fit_result$beta)) {
results_df <- results_df %>%
bind_rows(data.frame(
variable = paste0(var, "_beta"),
param1 = fit_result$beta[1],
param2 = fit_result$beta[2],
stringsAsFactors = FALSE
))
}
}
}
# Print the results
print(results_df)
library(ggplot2)
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Variables of interest
variables <- c("alpha_C", "alpha_I", "alpha_W", "alpha_H", "alpha_PI", "alpha_Q")
# Organize samples into a list and convert to data frame for ggplot2
samples_list <- lapply(variables, function(var) {
data.frame(value = as.vector(samples[[var]]), variable = var)
})
# Combine all samples into a single data frame
df <- do.call(rbind, samples_list)
# Plot density plots for all variables
plots <- list()
for (var in variables) {
p <- ggplot(df[df$variable == var, ], aes(x = value)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = paste("Density Plot of", var), x = var, y = "Density") +
theme_minimal()
# Save the plot to a list
plots[[var]] <- p
# Optionally, save each plot as an image file
ggsave(filename = paste0(var, "_density_plot.png"), plot = p, width = 6, height = 4)
}
# Display the plots
for (var in variables) {
print(plots[[var]])
}
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Check if the variables exist and have correct dimensions
print(names(samples))
print(dim(samples$output_growth_shocked))
print(dim(samples$consumption_growth_shocked))
print(dim(samples$investment_growth_shocked))
print(dim(samples$wage_growth_shocked))
print(dim(samples$hours_shocked))
print(dim(samples$inflation_shocked))
print(dim(samples$ffr_shocked))
# Calculate the mean and credible intervals for each shocked variable
# Output Growth
mean_output_growth_shocked <- apply(samples$output_growth_shocked_output, 2, mean)
lower_credible_interval_output <- apply(samples$output_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_output <- apply(samples$output_growth_shocked_output, 2, quantile, probs = 0.975)
# Consumption Growth
mean_consumption_growth_shocked <- apply(samples$consumption_growth_shocked_output, 2, mean)
lower_credible_interval_consumption <- apply(samples$consumption_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_consumption <- apply(samples$consumption_growth_shocked_output, 2, quantile, probs = 0.975)
# Investment Growth
mean_investment_growth_shocked <- apply(samples$investment_growth_shocked_output, 2, mean)
lower_credible_interval_investment <- apply(samples$investment_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_investment <- apply(samples$investment_growth_shocked_output, 2, quantile, probs = 0.975)
# Wage Growth
mean_wage_growth_shocked <- apply(samples$wage_growth_shocked_output, 2, mean)
lower_credible_interval_wage <- apply(samples$wage_growth_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_wage <- apply(samples$wage_growth_shocked_output, 2, quantile, probs = 0.975)
# potential_gdp
potential_gdp<- apply(samples$potential_gdp_shocked, 2, mean)
lower_credible_interval_hours <- apply(samples$potential_gdp_shocked, 2, quantile, probs = 0.025)
upper_credible_interval_hours <- apply(samples$potential_gdp_shocked, 2, quantile, probs = 0.975)
# Hours
mean_hours_shocked <- apply(samples$hours_shocked_output, 2, mean)
lower_credible_interval_hours <- apply(samples$hours_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_hours <- apply(samples$hours_shocked_output, 2, quantile, probs = 0.975)
# Inflation
mean_inflation_shocked <- apply(samples$inflation_shocked_output, 2, mean)
lower_credible_interval_inflation <- apply(samples$inflation_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_inflation <- apply(samples$inflation_shocked_output, 2, quantile, probs = 0.975)
# Federal Funds Rate
mean_ffr_shocked <- apply(samples$ffr_shocked_output, 2, mean)
lower_credible_interval_ffr <- apply(samples$ffr_shocked_output, 2, quantile, probs = 0.025)
upper_credible_interval_ffr <- apply(samples$ffr_shocked_output, 2, quantile, probs = 0.975)
library(ggplot2)
library(gridExtra)
# Create a function to plot a variable with its credible intervals
plot_shocked_variable <- function(original, mean_shocked, lower_ci, upper_ci, variable_name) {
data <- data.frame(
Time = 1:length(original),
Original = original,
Mean_Shocked = mean_shocked,
Lower_CI = lower_ci,
Upper_C_I = upper_ci
)
ggplot(data, aes(x = Time)) +
geom_line(aes(y = Original), color = "blue", linetype = "dashed") +
geom_line(aes(y = Mean_Shocked), color = "red") +
geom_ribbon(aes(ymin = Lower_CI, ymax = Upper_C_I), fill = "red", alpha = 0.2) +
labs(title = paste("Original and Shocked", variable_name, "Series"), x = "Time", y = variable_name) +
theme_minimal() +
theme(
plot.title = element_text(size = 10),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.text = element_text(size = 6),
legend.title = element_text(size = 8),
legend.text = element_text(size = 6)
)
}
# Plot each variable
plot_list <- list(
plot_shocked_variable(data_list$output_growth_vector, mean_output_growth_shocked, lower_credible_interval_output, upper_credible_interval_output, "Output Growth"),
plot_shocked_variable(data_list$consumption_growth_vector, mean_consumption_growth_shocked, lower_credible_interval_consumption, upper_credible_interval_consumption, "Consumption Growth"),
plot_shocked_variable(data_list$investment_growth_vector, mean_investment_growth_shocked, lower_credible_interval_investment, upper_credible_interval_investment, "Investment Growth"),
plot_shocked_variable(data_list$wage_growth_vector, mean_wage_growth_shocked, lower_credible_interval_wage, upper_credible_interval_wage, "Wage Growth"),
plot_shocked_variable(data_list$hours_vector, mean_hours_shocked, lower_credible_interval_hours, upper_credible_interval_hours, "Hours"),
plot_shocked_variable(data_list$inflation_vector, mean_inflation_shocked, lower_credible_interval_inflation, upper_credible_interval_inflation, "Inflation"),
plot_shocked_variable(data_list$ffr_vector, mean_ffr_shocked, lower_credible_interval_ffr, upper_credible_interval_ffr, "Federal Funds Rate")
)
# Arrange the plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Extract parameters
params <- extract(fit)
# List of variable names corresponding to the state transition matrix
variable_names <- c(
"Beta", "tao", "alpha", "psi", "gamma_pi", "gamma_w",
"lambda_w", "zeta_ps", "zeta_ws", "sigma_L",
"sigma_c", "h", "phi", "phi_uppercase", "rbar_k", "Ky",
"sigma_eta_C", "Invy", "Cy", "gy",
"r_pi", "r_y", "Ry_delta", "rho",
"rho_el", "rho_ea", "rho_eb", "rho_G", "rho_pi", "rh_i",
"rho_lamdaw", "rho_q", "rho_lamda_p", "rho_L", "output_growth_shocked", "consumption_growth_shocked",
"investment_growth_shocked", "wage_growth_shocked", "hours_shocked", "potential_gdp_shocked",
"inflation_shocked", "ffr_shocked", "kapital_shocked", "q_shocked", "r_k_star_shocked", "inflationtaget_shocked",
"output_growth_shocked_output", "consumption_growth_shocked_output", "investment_growth_shocked_output", "wage_growth_shocked_output",
"hours_shocked_output", "inflation_shocked_output", "ffr_shocked_output", "lp__"
)
# Construct the state transition matrix A
# Adjust the dimensions and values according to your model
A <- matrix(c(
params$Beta[1], params$tao[1], params$alpha[1], params$psi[1], params$gamma_pi[1], params$gamma_w[1],
params$lambda_w[1], params$zeta_ps[1], params$zeta_ws[1], params$sigma_L[1], params$sigma_c[1], params$h[1],
params$phi[1], params$phi_uppercase[1], params$rbar_k[1], params$Ky[1], params$sigma_eta_C[1], params$Invy[1],
params$Cy[1], params$gy[1], params$r_pi[1], params$r_y[1], params$Ry_delta[1], params$rho[1],
params$rho_el[1], params$rho_ea[1], params$rho_eb[1], params$rho_G[1], params$rho_pi[1], params$rh_i[1],
params$rho_lamdaw[1], params$rho_q[1], params$rho_lamda_p[1], params$rho_L[1], params$output_growth_shocked[1], params$consumption_growth_shocked[1]
), nrow = 6, byrow = TRUE)  # Adjust the size based on your model's needs
# Ensure A is square by matching the number of rows and columns
if (nrow(A) != ncol(A)) {
stop("The state transition matrix A is not square.")
}
# Calculate eigenvalues
eig_vals <- eigen(A)$values
# Calculate eigenvalues
eig_vals <- eigen(A)$values
# Identify and map eigenvalues with magnitudes greater than 1 to their variable names
unstable_eigenvalues <- eig_vals[abs(eig_vals) > 1]
unstable_variables <- variable_names[abs(eig_vals) > 1]
# Print unstable eigenvalues and corresponding variables
print("Unstable eigenvalues and corresponding variables (magnitude > 1):")
print(data.frame(variable = unstable_variables, eigenvalue = unstable_eigenvalues))
# Output all eigenvalues for inspection
print("All eigenvalues:")
print(eig_vals)
library(bayesplot)
setwd("C:/Users/gealy/OneDrive/Documents/New folder (2)")
getwd()
# Assuming 'fit' is your Stan model object
summary_stats <- summary(fit)$summary
fit <- sampling(model, data =data_list , chains = 2, iter = 6000, warmup = 1000)
library(fitdistrplus)
library(dplyr)
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Variables of interest
variables <- c("alpha_C", "alpha_I", "alpha_W", "alpha_H", "alpha_PI", "alpha_Q")
# Organize samples into a list
samples_list <- lapply(variables, function(var) {
as.vector(samples[[var]])
})
names(samples_list) <- variables
# Function to fit normal and beta distributions and return the results
fit_distributions <- function(var, samples) {
result <- try({
# Fit normal distribution
normal_fit <- fitdist(samples, "norm")
normal_params <- normal_fit$estimate
# Check for non-finite values in normal_params
if (any(!is.finite(normal_params))) {
message(paste("Skipping normal distribution fitting for", var, "due to non-finite values"))
return(NULL)
}
# Scale samples to (0, 1) for beta distribution fitting
scaled_samples <- (samples - min(samples)) / (max(samples) - min(samples))
# Ensure no values are exactly 0 or 1
scaled_samples[scaled_samples == 0] <- 0.0001
scaled_samples[scaled_samples == 1] <- 0.9999
# Fit beta distribution
beta_fit <- fitdist(scaled_samples, "beta", start = list(shape1 = 1, shape2 = 7.6))
beta_params <- beta_fit$estimate
# Check for non-finite values in beta_params
if (any(!is.finite(beta_params))) {
message(paste("Skipping beta distribution fitting for", var, "due to non-finite values"))
return(NULL)
}
return(list(normal = normal_params, beta = beta_params))
}, silent = TRUE)
if (inherits(result, "try-error")) {
message(paste("Fitting failed for", var))
return(NULL)
}
return(result)
}
# Initialize an empty data frame to store the results
results_df <- data.frame(
variable = character(),
param1 = numeric(),
param2 = numeric(),
stringsAsFactors = FALSE
)
# Loop through each variable and fit the distributions
for (var in names(samples_list)) {
fit_result <- fit_distributions(var, samples_list[[var]])
if (!is.null(fit_result)) {
if (!is.null(fit_result$normal)) {
results_df <- results_df %>%
bind_rows(data.frame(
variable = var,
param1 = fit_result$normal[1],
param2 = fit_result$normal[2],
stringsAsFactors = FALSE
))
}
if (!is.null(fit_result$beta)) {
results_df <- results_df %>%
bind_rows(data.frame(
variable = paste0(var, "_beta"),
param1 = fit_result$beta[1],
param2 = fit_result$beta[2],
stringsAsFactors = FALSE
))
}
}
}
# Print the results
print(results_df)
library(ggplot2)
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Variables of interest
variables <- c("alpha_C", "alpha_I", "alpha_W", "alpha_H", "alpha_PI", "alpha_Q")
# Organize samples into a list and convert to data frame for ggplot2
samples_list <- lapply(variables, function(var) {
data.frame(value = as.vector(samples[[var]]), variable = var)
})
# Combine all samples into a single data frame
df <- do.call(rbind, samples_list)
# Plot density plots for all variables
plots <- list()
for (var in variables) {
p <- ggplot(df[df$variable == var, ], aes(x = value)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = paste("Density Plot of", var), x = var, y = "Density") +
theme_minimal()
# Save the plot to a list
plots[[var]] <- p
# Optionally, save each plot as an image file
ggsave(filename = paste0(var, "_density_plot.png"), plot = p, width = 6, height = 4)
}
# Display the plots
for (var in variables) {
print(plots[[var]])
}
fit <- sampling(model, data =data_list , chains = 2, iter = 6000, warmup = 1000)
library(fitdistrplus)
library(dplyr)
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Variables of interest
variables <- c("alpha_C", "alpha_I", "alpha_W", "alpha_H", "alpha_PI", "alpha_Q")
# Organize samples into a list
samples_list <- lapply(variables, function(var) {
as.vector(samples[[var]])
})
names(samples_list) <- variables
# Function to fit normal and beta distributions and return the results
fit_distributions <- function(var, samples) {
result <- try({
# Fit normal distribution
normal_fit <- fitdist(samples, "norm")
normal_params <- normal_fit$estimate
# Check for non-finite values in normal_params
if (any(!is.finite(normal_params))) {
message(paste("Skipping normal distribution fitting for", var, "due to non-finite values"))
return(NULL)
}
# Scale samples to (0, 1) for beta distribution fitting
scaled_samples <- (samples - min(samples)) / (max(samples) - min(samples))
# Ensure no values are exactly 0 or 1
scaled_samples[scaled_samples == 0] <- 0.0001
scaled_samples[scaled_samples == 1] <- 0.9999
# Fit beta distribution
beta_fit <- fitdist(scaled_samples, "beta", start = list(shape1 = 1, shape2 = 7.6))
beta_params <- beta_fit$estimate
# Check for non-finite values in beta_params
if (any(!is.finite(beta_params))) {
message(paste("Skipping beta distribution fitting for", var, "due to non-finite values"))
return(NULL)
}
return(list(normal = normal_params, beta = beta_params))
}, silent = TRUE)
if (inherits(result, "try-error")) {
message(paste("Fitting failed for", var))
return(NULL)
}
return(result)
}
# Initialize an empty data frame to store the results
results_df <- data.frame(
variable = character(),
param1 = numeric(),
param2 = numeric(),
stringsAsFactors = FALSE
)
# Loop through each variable and fit the distributions
for (var in names(samples_list)) {
fit_result <- fit_distributions(var, samples_list[[var]])
if (!is.null(fit_result)) {
if (!is.null(fit_result$normal)) {
results_df <- results_df %>%
bind_rows(data.frame(
variable = var,
param1 = fit_result$normal[1],
param2 = fit_result$normal[2],
stringsAsFactors = FALSE
))
}
if (!is.null(fit_result$beta)) {
results_df <- results_df %>%
bind_rows(data.frame(
variable = paste0(var, "_beta"),
param1 = fit_result$beta[1],
param2 = fit_result$beta[2],
stringsAsFactors = FALSE
))
}
}
}
# Print the results
print(results_df)
library(ggplot2)
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Variables of interest
variables <- c("alpha_C", "alpha_I", "alpha_W", "alpha_H", "alpha_PI", "alpha_Q")
# Organize samples into a list and convert to data frame for ggplot2
samples_list <- lapply(variables, function(var) {
data.frame(value = as.vector(samples[[var]]), variable = var)
})
library(ggplot2)
# Extract samples from the fitted model
samples <- rstan::extract(fit)
# Variables of interest
variables <- c("alpha_C", "alpha_I", "alpha_W", "alpha_H")
# Organize samples into a list and convert to data frame for ggplot2
samples_list <- lapply(variables, function(var) {
data.frame(value = as.vector(samples[[var]]), variable = var)
})
# Combine all samples into a single data frame
df <- do.call(rbind, samples_list)
# Plot density plots for all variables
plots <- list()
for (var in variables) {
p <- ggplot(df[df$variable == var, ], aes(x = value)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = paste("Density Plot of", var), x = var, y = "Density") +
theme_minimal()
# Save the plot to a list
plots[[var]] <- p
# Optionally, save each plot as an image file
ggsave(filename = paste0(var, "_density_plot.png"), plot = p, width = 6, height = 4)
}
# Display the plots
for (var in variables) {
print(plots[[var]])
}
